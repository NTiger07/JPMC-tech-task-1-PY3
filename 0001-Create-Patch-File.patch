From 09d29452ec77b96292056a030ea30dd72fd9cde3 Mon Sep 17 00:00:00 2001
From: Favour Olaleru <falaleru@gmail.com>
Date: Sun, 10 Jul 2022 20:09:09 +0100
Subject: [PATCH] Create Patch File

---
 .gitignore                                |   1 +
 __pycache__/client3.cpython-310.pyc       | Bin 0 -> 1052 bytes
 __pycache__/file_two.cpython-310.pyc      | Bin 0 -> 490 bytes
 __pycache__/name_function.cpython-310.pyc | Bin 0 -> 317 bytes
 client3.py                                |  45 ++++++++++++----------
 client_test.py                            |  30 ++++++++++++---
 6 files changed, 49 insertions(+), 27 deletions(-)
 create mode 100644 .gitignore
 create mode 100644 __pycache__/client3.cpython-310.pyc
 create mode 100644 __pycache__/file_two.cpython-310.pyc
 create mode 100644 __pycache__/name_function.cpython-310.pyc

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..757fee3
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1 @@
+/.idea
\ No newline at end of file
diff --git a/__pycache__/client3.cpython-310.pyc b/__pycache__/client3.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..7adf67c304e4f44aed401787bdf3180002cde513
GIT binary patch
literal 1052
zcmYjQNlzOw6t-tPlL;i0mNm48^Z;$70$nZ@qLi{7DiyH^Rkc!$hVcWYB$;44m7w92
z{*Z9&Z>iKD;A>CZIrY?Mr=Z$;oBif3-}B_<@({uGa^~mZOGe0VYy7{8XsjZsU&sUz
zv_Uv^(&L_!KKGquoC%Ky!snr2BKS^tL4=}!GJ>LrPCc2z5DY`uqdmGoKCkc+`28}_
zFC+bX5cEfZ_1P7<qF1zk-%9=<BYX@VpzkyvhXRcEXr1v1KFO!}G)%)7Oe_<qh$2kD
zBuv5d5t}4EO3B$Wo(@3-V`8{Mke4c?=l#2z6LcT@*eA8}HTFcdFCL$0-CkN;Y~*Ru
zILVb>dj0(M^To3c$n&?Ec=PQtyP<@nNOvnh4e=uDNNN>X7h_h)CDm5*Dn$60lU{nx
zW_PyV^}7BP5y3-p$-2~9U3SE<nsD0$O6TdRDd@Z%A7;V?ZJDJouoHE9?O~o8HNjCM
zPjoFX!C5EQAnma!;s^1-zlgpARoW7N5IKzE&sw@vKTsf5eJlBzcVvA7)G4N_?|<B^
zZ{;#MhWh)R59{+9(vx|OLFQk~x6fbI(?$j@{c53oZc4|XHxixf<XKCXF{-l9C!(Xc
zOSq*yOKm~7%j%XKP~)g{si626LP7QssxEzqvgU0|i>@oQ=9z+PBu;LXLw7M?CG;~9
z*0Go9ET2G2g~%exXynOJcN@peBx}X-#gko&kf_e8YND%85u>G9^{k4$IqA}%R=bE?
zH1sq6yR~)WZ)|SWX81@)HX7OCf&_dFO7n1F8>X`+aP~#zEgs6GCGsW@b`Li9J{h|0
zFt{tEl{6ua4a;y)CP3d~Ff=v+j!-CGxQ$%E$ax!DCOpbzGtq`gNQ4R9gp~<hrAkKF
zo}0I{Kc=+cyBWKu($fFIWJfLsSS>em(P_YnMOe)tix4flna}*lkD_R3)UQ(J**QjZ
Ll0Nd-4fFp3<Xit2

literal 0
HcmV?d00001

diff --git a/__pycache__/file_two.cpython-310.pyc b/__pycache__/file_two.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..20cb1aeb9ec4d8a40b0fdc959e63c958d21f9810
GIT binary patch
literal 490
zcmY*WK}*9h6i(7jhjhDn(Srd`Jya0E!w?asJqQkAh#-Yf+gBI1HYG`&n|RV6qDOy<
zC-1%bFFcuaPPYf|@m})secyW#?e+#TmVSQRZexVLY_V(&Q=AxAhb90@&?^S=hMzG;
z2~Nlhx^aLc&WOlObK9uT*9Nw;xyZfs*-pU6K=njW#_}iw#wb@*fu>q?>Elyuz*mfz
zs%KoeCTK%dgP{TPNPo5!lzFVV$f+Jm01E{V5SJPf4_D1X@?5_oX))^X-HW^7l>({4
zAi5W&3{OFgv?#*C^;sAQ8Qnp6etFUJHN-<-M{4Bn`^EGiOpR=2WbYNzs+0b*vYNGN
z)maJ`OS`11#aI^coUz&N-?R%^bTWjT$|$D^mk{gmbZI54O*|`vG?VnbhBP07s<l+e
lEYcQ#zPg(3f4X_*)Dn&|k(6UNwhxv4*bZrtmg8cV`~V+8eK-IB

literal 0
HcmV?d00001

diff --git a/__pycache__/name_function.cpython-310.pyc b/__pycache__/name_function.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..d3574728d0fab3367ab2d41f5952d5d74fe94188
GIT binary patch
literal 317
zcmd1j<>g`kg6WS=CS?HW#~=<eU;=U+fVh|kNTe{NFt#v6F{CgBGiWj=GXsTS0K{em
zVrL*OmH-kp46}i%YZ$>K(`<&htP2<xG63~4`Tb&4&}6*DT9R3kld8!a#g&#>R9q6D
zmzbM+i!&z?%8X)3Da}n<$xy@sH0+m0vQ<oIacWU<j9X$^erZvROKNd;Nq#|0aJXxX
zTYgbudTNYUfUmP|NosP2Zb@QswyvRWL8WmF$kh0>(!Au7%=|pPg34Q*X{9+iV9P*W
mD+Un~j74lf%1;wQgKb12K;F8=VUwGmQks)$#|YEK!w3NL)=5_Y

literal 0
HcmV?d00001

diff --git a/client3.py b/client3.py
index 0250344..e79eae8 100644
--- a/client3.py
+++ b/client3.py
@@ -1,5 +1,3 @@
-
-
 import urllib.request
 import time
 import json
@@ -11,31 +9,36 @@ QUERY = "http://localhost:8080/query?id={}"
 # 500 server request
 N = 500
 
+
 def getDataPoint(quote):
-	""" Produce all of the needed values to generate a datapoint """
-	""" ------------- Update this function ------------- """
-	stock = quote['stock']
-	bid_price = float(quote['top_bid']['price'])
-	ask_price = float(quote['top_ask']['price'])
-	price = bid_price
-	return stock, bid_price, ask_price, price
+    stock = quote['stock']
+    bid_price = float(quote['top_bid']['price'])
+    ask_price = float(quote['top_ask']['price'])
+    price = (bid_price + ask_price) / 2
+    return stock, bid_price, ask_price, price
+
 
 def getRatio(price_a, price_b):
-	""" Get ratio of price_a and price_b """
-	""" ------------- Update this function ------------- """
-	""" Also create some unit tests for this function in client_test.py """
-	return 1
+    if (price_b == 0):
+        return
+
+    return price_a / price_b
+
+
+
 
 # Main
 if __name__ == "__main__":
 
-	# Query the price once every N seconds.
-	for _ in iter(range(N)):
-		quotes = json.loads(urllib.request.urlopen(QUERY.format(random.random())).read())
+    # Query the price once every N milliseconds.
+    for _ in iter(range(N)):
+        quotes = json.loads(urllib.request.urlopen(QUERY.format(random.random())).read())
 
-		""" ----------- Update to get the ratio --------------- """
-		for quote in quotes:
-			stock, bid_price, ask_price, price = getDataPoint(quote)
-			print ("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
+        prices = {}
+        for quote in quotes:
+            stock, bid_price, ask_price, price = getDataPoint(quote)
+            prices[stock] = price
+            print("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
 
-		print ("Ratio %s" % getRatio(price, price))
+        print("Ratio %s" % getRatio(prices['ABC'], prices['DEF']))
+        
diff --git a/client_test.py b/client_test.py
index af2bf26..0982122 100644
--- a/client_test.py
+++ b/client_test.py
@@ -1,5 +1,5 @@
 import unittest
-from client3 import getDataPoint
+from client3 import *
 
 class ClientTest(unittest.TestCase):
   def test_getDataPoint_calculatePrice(self):
@@ -7,18 +7,36 @@ class ClientTest(unittest.TestCase):
       {'top_ask': {'price': 121.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
-    """ ------------ Add the assertion below ------------ """
-
+    for quote in quotes:
+      self.assertEqual(getDataPoint(quote), (quote['stock'], quote['top_bid']['price'], quote['top_ask']['price'],( quote['top_bid']['price'] + quote['top_ask']['price'])/2))
+  
+    
   def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
     quotes = [
       {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
-    """ ------------ Add the assertion below ------------ """
-
+    for quote in quotes:
+          self.assertEqual(getDataPoint(quote), (quote['stock'], quote['top_bid']['price'], quote['top_ask']['price'], (quote['top_bid']['price'] + quote['top_ask']['price'])/2))    
 
-  """ ------------ Add more unit tests ------------ """
 
+  def test_getRatio_calculateRatio(self):
+    prices = [
+      {'price_a': 112, 'price_b': 113},
+      {'price_a': 118, 'price_b': 116}
+    ]
+    for price in prices:
+          self.assertEqual(getRatio(price['price_a'], price['price_b']), price['price_a']/price['price_b'])
+          
+          
+  def test_getRatio_calculateRatioPriceBEqualsZero(self):
+    prices = [
+      {'price_a': 112, 'price_b': 0},
+      {'price_a': 118, 'price_b': 0}
+    ]
+    for price in prices:
+          self.assertEqual(getRatio(price['price_a'], price['price_b']), None)
+  
 
 
 if __name__ == '__main__':
-- 
2.35.3.windows.1

